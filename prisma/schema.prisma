datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Feed {
  id String @id @default(cuid())

  description String
  link        String
  origin      String @unique
  title       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedResources FeedResource[]
  image         Image?
  userFeeds     UserFeed[]
}

model FeedResource {
  id String @id @default(cuid())

  guid  String?
  order Int     @default(autoincrement())

  feed       Feed     @relation(fields: [feedId], references: [id])
  feedId     String
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @unique
}

model Image {
  id String @id @default(cuid())

  link  String?
  title String?
  url   String  @unique

  feed       Feed?     @relation(fields: [feedId], references: [id])
  feedId     String?   @unique
  resource   Resource? @relation(fields: [resourceId], references: [id])
  resourceId String?   @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Resource {
  id String @id @default(cuid())

  description String
  link        String
  publishedAt DateTime?
  title       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedResource  FeedResource?
  image         Image?
  userResources UserResource[]
}

model User {
  id String @id @default(cuid())

  email String @unique

  createdAt    DateTime  @default(now())
  lastActiveAt DateTime?
  updatedAt    DateTime  @updatedAt

  password      Password?
  userFeeds     UserFeed[]
  userResources UserResource[]
}

model UserFeed {
  id String @id @default(cuid())

  subscribedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed   Feed   @relation(fields: [feedId], references: [id])
  feedId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([feedId, userId])
}

model UserResource {
  id String @id @default(cuid())

  hasRead Boolean   @default(false)
  readAt  DateTime?

  isBookmarked Boolean   @default(false)
  bookmarkedAt DateTime?

  isSnoozed Boolean   @default(false)
  snoozedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([resourceId, userId])
}
