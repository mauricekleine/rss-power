generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  ARTICLE
  BOOK
  OTHER
  PODCAST
  VIDEO
}

model Feed {
  id            String         @id @default(cuid())
  description   String
  link          String
  origin        String         @unique
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageId       String?
  publisherId   String
  image         Image?         @relation(fields: [imageId], references: [id])
  publisher     Publisher      @relation(fields: [publisherId], references: [id])
  feedResources FeedResource[]
  userFeeds     UserFeed[]
}

model FeedResource {
  id         String   @id @default(cuid())
  guid       String?
  order      Int      @default(autoincrement())
  feedId     String
  resourceId String   @unique
  feed       Feed     @relation(fields: [feedId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id])
}

model Image {
  id         String      @id @default(cuid())
  link       String?
  title      String?
  url        String      @unique
  feeds      Feed[]
  publishers Publisher[]
  resources  Resource[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Publisher {
  id          String     @id @default(cuid())
  description String
  link        String
  title       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  imageId     String?
  image       Image?     @relation(fields: [imageId], references: [id])
  feeds       Feed[]
  resources   Resource[]
}

model Resource {
  id            String         @id @default(cuid())
  description   String
  link          String
  publishedAt   DateTime?
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageId       String?
  publisherId   String
  type          ResourceType   @default(ARTICLE)
  image         Image?         @relation(fields: [imageId], references: [id])
  publisher     Publisher      @relation(fields: [publisherId], references: [id])
  feedResource  FeedResource?
  userResources UserResource[]
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastActiveAt  DateTime?
  password      Password?
  userFeeds     UserFeed[]
  userResources UserResource[]
}

model UserFeed {
  id           String   @id @default(cuid())
  subscribedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  feedId       String
  userId       String
  feed         Feed     @relation(fields: [feedId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([feedId, userId])
}

model UserResource {
  id           String    @id @default(cuid())
  hasRead      Boolean   @default(false)
  readAt       DateTime?
  resourceId   String
  userId       String
  isSnoozed    Boolean   @default(false)
  isBookmarked Boolean   @default(false)
  bookmarkedAt DateTime?
  snoozedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  resource     Resource  @relation(fields: [resourceId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@unique([resourceId, userId])
}
